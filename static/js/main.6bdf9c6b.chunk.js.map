{"version":3,"sources":["assets sync /^/.*/.png$","assets/1.png","assets/10.png","assets/11.png","assets/12.png","assets/13.png","assets/14.png","assets/15.png","assets/16.png","assets/17.png","assets/18.png","assets/19.png","assets/2.png","assets/20.png","assets/21.png","assets/22.png","assets/3.png","assets/4.png","assets/5.png","assets/6.png","assets/7.png","assets/8.png","assets/9.png","Circuit.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Circuit","round","title","track","date","className","src","require","alt","App","useState","circuits","setCircuits","search","setSearch","useEffect","getCircuits","a","fetch","response","json","data","circuitArray","values","MRData","RaceTable","circuitArray2","value","onChange","target","circuit","raceName","circuitName","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6bdf9c6b.chunk.js","sourcesContent":["var map = {\n\t\"./1.png\": 17,\n\t\"./10.png\": 18,\n\t\"./11.png\": 19,\n\t\"./12.png\": 20,\n\t\"./13.png\": 21,\n\t\"./14.png\": 22,\n\t\"./15.png\": 23,\n\t\"./16.png\": 24,\n\t\"./17.png\": 25,\n\t\"./18.png\": 26,\n\t\"./19.png\": 27,\n\t\"./2.png\": 28,\n\t\"./20.png\": 29,\n\t\"./21.png\": 30,\n\t\"./22.png\": 31,\n\t\"./3.png\": 32,\n\t\"./4.png\": 33,\n\t\"./5.png\": 34,\n\t\"./6.png\": 35,\n\t\"./7.png\": 36,\n\t\"./8.png\": 37,\n\t\"./9.png\": 38\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;","module.exports = __webpack_public_path__ + \"static/media/1.46894607.png\";","module.exports = __webpack_public_path__ + \"static/media/10.f14af202.png\";","module.exports = __webpack_public_path__ + \"static/media/11.866c0cfa.png\";","module.exports = __webpack_public_path__ + \"static/media/12.966da757.png\";","module.exports = __webpack_public_path__ + \"static/media/13.84b97842.png\";","module.exports = __webpack_public_path__ + \"static/media/14.c10b9a74.png\";","module.exports = __webpack_public_path__ + \"static/media/15.65f2abaa.png\";","module.exports = __webpack_public_path__ + \"static/media/16.eb355d70.png\";","module.exports = __webpack_public_path__ + \"static/media/17.87082ff3.png\";","module.exports = __webpack_public_path__ + \"static/media/18.5975b0cc.png\";","module.exports = __webpack_public_path__ + \"static/media/19.c8dbb2c8.png\";","module.exports = __webpack_public_path__ + \"static/media/2.d48c09ae.png\";","module.exports = __webpack_public_path__ + \"static/media/20.6e0db014.png\";","module.exports = __webpack_public_path__ + \"static/media/21.5597964a.png\";","module.exports = __webpack_public_path__ + \"static/media/22.cd53b75b.png\";","module.exports = __webpack_public_path__ + \"static/media/3.e5e92659.png\";","module.exports = __webpack_public_path__ + \"static/media/4.97718961.png\";","module.exports = __webpack_public_path__ + \"static/media/5.39cb4ea4.png\";","module.exports = __webpack_public_path__ + \"static/media/6.bc1d468a.png\";","module.exports = __webpack_public_path__ + \"static/media/7.ee438d52.png\";","module.exports = __webpack_public_path__ + \"static/media/8.4d0efab5.png\";","module.exports = __webpack_public_path__ + \"static/media/9.0d31f88d.png\";","import React from 'react';\r\n\r\nconst Circuit = ({round, title, track, date}) => {\r\n    return(\r\n        <div>\r\n            <h1 className=\"mt-3 display-4\">Round {round}</h1>\r\n            <h1><b>{title}</b></h1>\r\n            <p><i>{track}</i></p>\r\n            <p>{date}</p>\r\n            <img src={require(`./assets/${round}.png`)} alt={`Round ${round}`}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Circuit; ","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Circuit from './Circuit';\n\n\nconst App = () => {\n\n  const [circuits, setCircuits] = useState([]);\n  const [search, setSearch] = useState(\"1\");\n\n  useEffect(() => {\n    getCircuits();\n  }, [search]);\n\n  const getCircuits = async () => {\n    const response = await fetch(`https://ergast.com/api/f1/2020/${search}.json`);\n    const data = await response.json();\n    const circuitArray = Object.values(data.MRData.RaceTable);\n    const circuitArray2 = Object.values(circuitArray[2]);\n    setCircuits(circuitArray2);\n  }\n\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  }\n\n  return(\n    <div className=\"App\">\n      <h1 className=\"mt-4\"><i className=\"fa fa-flag-checkered mr-3\"></i>2020 F1 Circuits</h1>\n      <p className=\"pl-2 pr-2\">F1 circuit list for the 2020 season, built using React.js.</p>\n      <form className=\"search-form mt-4\">\n\n        <select className=\"search-bar custom-select\" value={search} onChange={updateSearch}>\n          <option value=\"1\">Australia</option>\n          <option value=\"2\">Bahrain</option>\n          <option value=\"3\">Vietnam</option>\n          <option value=\"4\">China (*Postponed)</option>\n          <option value=\"5\">Netherlands</option>\n          <option value=\"6\">Spain</option>\n          <option value=\"7\">Monaco</option>\n          <option value=\"8\">Azerbaijan</option>\n          <option value=\"9\">Canada</option>\n          <option value=\"10\">France</option>\n          <option value=\"11\">Austria</option>\n          <option value=\"12\">Britain</option>\n          <option value=\"13\">Hungary</option>\n          <option value=\"14\">Belgium</option>\n          <option value=\"15\">Italy</option>\n          <option value=\"16\">Singapore</option>\n          <option value=\"17\">Russia</option>\n          <option value=\"18\">Japan</option>\n          <option value=\"19\">USA</option>\n          <option value=\"20\">Mexico</option>\n          <option value=\"21\">Brazil</option>\n          <option value=\"22\">Abu Dhabi</option>\n        </select>\n\n      </form>  \n      \n      <div className=\"circuits\">\n        {circuits.map(circuit =>(                \n          <Circuit round={circuit.round}\n          title={circuit.raceName}\n          track={circuit.Circuit.circuitName}\n          date={circuit.date}\n          key={circuit.round}\n          />\n        ))}\n      </div>    \n    </div>\n  );\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}